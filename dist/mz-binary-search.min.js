/*
https://github.com/mzusin/binary-search
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
(()=>{var d=Object.defineProperty;var a=Object.getOwnPropertySymbols;var T=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var c=(n,e,t)=>e in n?d(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,l=(n,e)=>{for(var t in e||(e={}))T.call(e,t)&&c(n,t,e[t]);if(a)for(var t of a(e))m.call(e,t)&&c(n,t,e[t]);return n};var p=(n,e)=>{for(var t in e)d(n,t,{get:e[t],enumerable:!0})};var h={};p(h,{bfsWithLevel:()=>B,bfsWithQueue:()=>k,inorderTraversalIterative:()=>v,inorderTraversalRecursive:()=>I,postorderTraversalIterative:()=>b,postorderTraversalIterativeWith2Stacks:()=>g,postorderTraversalRecursive:()=>N,preorderTraversalIterative:()=>x,preorderTraversalRecursive:()=>w});var I=n=>{let e=[],t=r=>{r&&(t(r.left),e.push(r.val),t(r.right))};return t(n),e},v=n=>{if(!n)return[];let e=[],t=[],r=n;for(;r||t.length>0;){for(;r;)t.push(r),r=r.left;r=t.pop(),r&&(e.push(r.val),r=r.right)}return e},N=n=>{let e=[],t=r=>{r&&(t(r.left),t(r.right),e.push(r.val))};return t(n),e},g=n=>{if(!n)return[];let e=[],t=[n],r=[];for(;t.length>0;){let o=t.pop();r.push(o),o!=null&&o.left&&t.push(o.left),o!=null&&o.right&&t.push(o.right)}for(;r.length>0;){let o=r.pop();e.push(o.val)}return e},b=n=>{if(!n)return[];let e=[n],t=[];for(;e.length;){let r=e.pop();r.left&&e.push(r.left),r.right&&e.push(r.right),t.unshift(r.val)}return t},w=n=>{let e=[],t=r=>{r&&(e.push(r.val),t(r.left),t(r.right))};return t(n),e},x=n=>{if(!n)return[];let e=[],t=[n];for(;t.length>0;){let r=t.pop();e.push(r.val),r.right&&t.push(r.right),r.left&&t.push(r.left)}return e},k=n=>{if(!n)return[];let e=[n],t=[];for(;e.length>0;){let r=e.shift();t.push(r.val),r.left&&e.push(r.left),r.right&&e.push(r.right)}return t},B=n=>{if(!n)return[];let e=[n],t=[],r=0;for(;e.length>0;){let o=e.length;for(;o>0;){let s=e.shift();t.push(s.val),s.left&&e.push(s.left),s.right&&e.push(s.right),o--}console.log(r),r++}return t};var f={};p(f,{convertSortedArrayToBalancedBSTIterative:()=>S,convertSortedArrayToBalancedBSTRecursive:()=>y});var y=n=>{if(!n||n.length<=0)return;let e=(t,r)=>{if(t>r)return;let o=Math.floor((r+t)/2);return{left:e(t,o-1),val:n[o],right:e(o+1,r)}};return e(0,n.length-1)},S=n=>{if(!n||n.length<=0)return;let e=Math.floor(n.length/2),t={val:n[e]},r=[[t,0,e-1],[t,e+1,n.length-1]];for(;r.length>0;){let[o,s,i]=r.shift();if(s>i)break;e=Math.floor((s+i)/2);let u={val:n[e]};u.val<=o.val?o.left=u:o.right=u,r.push([u,s,e-1]),r.push([u,e+1,i])}return t};var z=l(l({},h),f);window.mzBinaryTree=window.mzBinaryTree||z;})();
