/*
https://github.com/mzusin/binary-search
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var l=Math.pow;var T=r=>{let t=[],n=e=>{e&&(n(e.left),t.push(e.val),n(e.right))};return n(r),t},m=r=>{if(!r)return[];let t=[],n=[],e=r;for(;e||n.length>0;){for(;e;)n.push(e),e=e.left;e=n.pop(),t.push(e.val),e=e.right}return t},I=r=>{let t=[],n=e=>{e&&(n(e.left),n(e.right),t.push(e.val))};return n(r),t},g=r=>{if(!r)return[];let t=[],n=[r],e=[];for(;n.length>0;){let s=n.pop();e.push(s),s!=null&&s.left&&n.push(s.left),s!=null&&s.right&&n.push(s.right)}for(;e.length>0;){let s=e.pop();t.push(s.val)}return t},N=r=>{if(!r)return[];let t=[r],n=[];for(;t.length>0;){let e=t.pop();e.left&&t.push(e.left),e.right&&t.push(e.right),n.unshift(e.val)}return n},v=r=>{let t=[],n=e=>{e&&(t.push(e.val),n(e.left),n(e.right))};return n(r),t},b=r=>{if(!r)return[];let t=[],n=[r];for(;n.length>0;){let e=n.pop();t.push(e.val),e.right&&n.push(e.right),e.left&&n.push(e.left)}return t},x=r=>{if(!r)return[];let t=[r],n=[];for(;t.length>0;){let e=t.shift();n.push(e.val),e.left&&t.push(e.left),e.right&&t.push(e.right)}return n},w=r=>{if(!r)return[];let t=[r],n=[],e=0;for(;t.length>0;){let s=t.length;for(;s>0;){let u=t.shift();n.push(u.val),u.left&&t.push(u.left),u.right&&t.push(u.right),s--}console.log(e),e++}return n},h=r=>{if(!r)return 0;let t=h(r.left),n=h(r.right);return 1+Math.max(t,n)},k=r=>{let t=[],n=(e,s)=>{!e||!s||(t.push([e.val,s.val]),n(e.left,s.right),n(s.left,e.right))};return n(r==null?void 0:r.left,r==null?void 0:r.right),t};var D=r=>{if(!r||r.length<=0)return;let t=(n,e)=>{if(n>e)return;let s=Math.floor((e+n)/2);return{left:t(n,s-1),val:r[s],right:t(s+1,e)}};return t(0,r.length-1)},S=r=>{if(!r||r.length<=0)return;let t=Math.floor(r.length/2),n={val:r[t]},e=[[n,0,t-1],[n,t+1,r.length-1]];for(;e.length>0;){let[s,u,o]=e.shift();if(u>o)break;t=Math.floor((u+o)/2);let i={val:r[t]};i.val<=s.val?s.left=i:s.right=i,e.push([i,u,t-1]),e.push([i,t+1,o])}return n};var a=r=>r?1+a(r.left):0,c=r=>r?1+c(r.left):0,p=r=>r?1+p(r.right):0,f=r=>{if(!r)return 0;let t=c(r.left),n=p(r.right);return t===n?l(2,t+1)-1:f(r.left)+f(r.right)+1};export{w as bfsWithLevel,x as bfsWithQueue,S as convertSortedArrayToBalancedBSTIterative,D as convertSortedArrayToBalancedBSTRecursive,f as countCompleteBinaryTreeNodes,a as getCompleteBinaryTreeDepth,h as getDepth,m as inorderTraversalIterative,T as inorderTraversalRecursive,N as postorderTraversalIterative,g as postorderTraversalIterativeWith2Stacks,I as postorderTraversalRecursive,b as preorderTraversalIterative,v as preorderTraversalRecursive,k as symmetricTraversal};
